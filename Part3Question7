#include <bits/stdc++.h> // includes every standard library
using namespace std;
struct Need
{
int Num;
int Pid; //Process Id
int A_time; //Process Arrival Time
int B_time; //Process Bruest Time
int Priority; //Process Priority
int F_time; //Process Finish Time
int R_time; //Process Remaining Time During Execution
int W_time; //Waiting Time
int S_time; //Process start Time
int Res_time;
};
struct Need current;
typedef struct Need P_d ;
bool idsort(const P_d& x , const P_d& y)
{
return x.Pid < y.Pid;
}
/** Sorting on the base of arrival time if that match then on Priority of Priority also match than
on the base of Process Id**/
bool arrivalsort( const P_d& x ,const P_d& y)
{
if(x.A_time < y.A_time)
return true;
else if(x.A_time > y.A_time)
return false;
if(x.Priority < y.Priority)
return true;
else if(x.Priority > y.Priority)
return false;
if(x.Pid < y.Pid)
return true;
return false;
}
bool Numsort( const P_d& x ,const P_d& y)
{
return x.Num < y.Num;
}
/*Sorting on the base of Priority if that same then on the base of PID*/
struct comPare
{
bool operator()(const P_d& x ,const P_d& y)
{
if( x.Priority > y.Priority )
return true;
else if( x.Priority < y.Priority )
return false;
if( x.Pid > y.Pid )
return true;
return false;
}
};
/**To check the Input **/
void my_check(vector<P_d> mv)
{
for(int i= 0; i < mv.size() ;i++)
{
cout<<" Pid :"<<mv[i].Pid<<" _time : "<<mv[i].A_time<<" B_time :"<<mv[i].B_time<<" Priority : "<<mv[i].Priority<<endl;
}
}
